#include <iostream>
using namespace std;
class node
{
public:
    int data;
    node *next;
    node *prev;
    node(int data)
    {
        this->data = data;
        this->next = NULL;
        this->prev = NULL;
    }
    /* ~node()
     {
         int value = this->data;
         if (this->next != NULL)
         {
             delete next;
             this->next = NULL;
         }
         cout << "memory free" << endl;
     }*/
};

void insertAtHead(node *&head, int d)
{

    // constructing a new node
    node *newNode = new node(d);
    newNode->next = head;
    head->prev = newNode;
    head = newNode;
}

void print(node *&head)
{
    // creating  a new pointer
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << "\n";
}

void insertAtTail(node *&tail, int d)
{

    // constructing a new node
    node *newNode = new node(d);
    tail->next = newNode;
    newNode->prev = tail;
    tail = newNode;
}

void insertAtPosition(node *&head, node *&tail, int d, int position)
{
    if (position == 1)
    {
        insertAtHead(head, d);
        return;
    }
    node *temp = head;
    int cnt = 1;
    while (cnt < position - 1)
    {
        temp = temp->next;
        cnt++;
    }

    if (temp->next == NULL)
    {
        insertAtTail(tail, d);
        return;
    }
    // constructing a new node
    node *newNode = new node(d);
    newNode->next = temp->next;
    temp->next->prev = newNode->next;
    newNode->prev = temp->next;
    temp->next = newNode->prev;
}
int main()
{

    node *node1 = new node(10);
    node *head = node1;
    node *tail = node1;
    print(head);
    insertAtHead(head, 33);
    print(head);
    insertAtHead(head, 40);
    print(head);
    insertAtTail(tail, 45);
    print(head);
    insertAtTail(tail, 46);
    print(head);
    insertAtTail(tail, 47);
    print(head);
    insertAtTail(tail, 48);
    print(head);
    insertAtPosition(head, tail, 57, 4);
    print(head);

    return 0;
}
